// Generated by CoffeeScript 1.3.3

/* Class which is describing a product and the way it is rendered.
 {
	"classname": "Product", 
	"params": { 
		{"paramName": "id", "paramType": "guid", "paramDescription": "Identifyer of the product."},
		{"paramName": "reference", "paramType": "string", "paramDescription": "Reference of the product which allows us to identify it."},
        {"paramName": "label", "paramType": "string", "paramDescription": "Label of the product."},
	    {"paramName": "price", "paramType": "decimal", "paramDescription": "Price of the product."},
        {"paramName": "currency", "paramType": "string", "paramDescription": "Currency of the product price."}
	},
	"methods":{
		{"methodName: "print", "description": "Return a string Containing the current product."},
		{"methodName: "log", "description": "Log the print result in the console."},
		{"methodName: "save", "description": "Save the current product in the local storage."},
	}
}
*/


 var AleaHelper, Page, Product, Products, getAleaProduct, p, product1, product2, product3, product4, product5, product6, product7;

  Product = (function() {
    /*  Constructor of the product class.
    */

    function Product(id, reference, label, price, currency) {
      this.id = id;
      this.reference = reference;
      this.label = label;
      this.price = price;
      this.currency = currency;
    }

    /* Print the product.
    */


    Product.prototype.print = function() {
      return "The product " + this.label + " which have reference: " + this.reference + " costs " + this.price + this.currency + "." + '\n';
    };

    /* Log the productin the js console.
    */


    Product.prototype.log = function() {
      return console.log(this.print());
    };

    /* Save the product in the local storage.
    */


    Product.prototype.render = function() {
      return "<tr><td>" + this.id + "</td><td>" + this.reference + "</td><td>" + this.label + "</td><td>" + this.price + "<div class='currendy'>" + this.currency + "</div></td></tr>";
    };

    return Product;

  })();

  /*
  Alea helper class, is able to return new Guid.
  */


  AleaHelper = (function() {

    function AleaHelper() {}

    /*
       Return the part of a guid.
    */


    AleaHelper.prototype.S4 = function() {
      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };

    /*
      Return a new Guid generated in js.
    */


    AleaHelper.prototype.newGuid = function() {
      return this.S4() + this.S4() + "-" + this.S4() + "-" + this.S4() + "-" + this.S4() + "-" + this.S4() + this.S4() + this.S4();
    };

    /*
      Given   : low <= high.
      Returns : a random number in the range [low, high).
    */


    AleaHelper.prototype.randomNum = function(low, high) {
      return Math.random() * (high - low) + low;
    };

    /*
      Given   : low <= high.
      Returns : a random integer in the range [low, high].
    */


    AleaHelper.prototype.randomInt = function(low, high) {
      return Math.floor(Math.random() * (high - low + 1)) + low;
    };

    /*
      Given  : str is a nonempty string 
      Returns: a random character from the string
    */


    AleaHelper.prototype.randomChar = function(str) {
      if (str == null) {
        str = 'azertyuiopqsdfghjklmwxcvbn';
      }
      return str.charAt(this.randomInt(0, str.length - 1));
    };

    /*
      Given  : str is a nonempty string 
      Returns: a random character from the string
    */


    AleaHelper.prototype.randomText = function(length) {
      var i, text, _i, _ref;
      this.length = length != null ? length : 10;
      text = "";
      for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        text += this.randomChar();
      }
      return text;
    };

    /*
      Given  : str is a nonempty string 
      Returns: a random character from the string
    */


    AleaHelper.prototype.randomNumberAsText = function(length) {
      var i, text, _i, _ref;
      this.length = length != null ? length : 10;
      text = "";
      for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        text += this.randomInt(0, 9);
      }
      return text;
    };

    /*
      Given  : list is a nonempty list (array) 
      Returns: a random item from the list
    */


    AleaHelper.prototype.randomOneOf = function(list) {
      return list[randomInt(0, list.length - 1)];
    };

    return AleaHelper;

  })();

  /*Get an alea product.
  */


  getAleaProduct = function() {
    var aHelper;
    aHelper = new AleaHelper();
    return new Product(aHelper.newGuid(), aHelper.randomNumberAsText(), aHelper.randomText(20), aHelper.randomNumberAsText(2), '$');
  };

  /* Class which is describing a product and the way it is rendered.
  {
    "classname": "Products", 
    "params": { 
      {"paramName": "products_list", "paramType": "Array of Product", "paramDescription": "Container of all the products."}
    }
  }
  */


  Products = (function() {

    function Products(name) {
      this.name = name;
      this.system_name = "products";
      this.name = "Products " + new AleaHelper().newGuid();
      this.products_list = [];
    }

    Products.prototype.add = function(product) {
      return this.products_list.push(product);
    };

    Products.prototype.print = function() {
      var text;
      text = "";
      this.products_list.forEach(function(product, index) {
        return text = text + product.print();
      });
      return text;
    };

    Products.prototype.log = function() {
      return console.log(this.print());
    };

    /*Build a random products array.
    */


    Products.prototype.fillWithRandomProducts = function(nbProducts) {
      var i, _i;
      if (nbProducts == null) {
        nbProducts = 1000;
      }
      for (i = _i = 0; 0 <= nbProducts ? _i < nbProducts : _i > nbProducts; i = 0 <= nbProducts ? ++_i : --_i) {
        this.add(this.getAleaProduct());
      }
      return this.name;
    };

    Products.prototype.save = function() {
      localStorage.setItem(this.system_name, JSON.stringify(this));
      return true;
    };

    Products.prototype.render = function() {
      var product, _html, _i, _len, _ref;
      _html = "<table><thead><tr><th>Id</th><th>Reference</th><th>Label</th><th>Price</th></tr></thead><tbody";
      _ref = this.products_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        product = _ref[_i];
        _html += product.render();
      }
      _html += "</tbody></table>";
      return $('#ProductsLoading').html(_html);
    };

    /*Remove the products from
    */


    Products.prototype.remove = function() {
      localStorage.removeItem(this.system_name);
      return true;
    };

    /*Get an alea product.
    */


    Products.prototype.getAleaProduct = function() {
      var aHelper;
      aHelper = new AleaHelper();
      return new Product(aHelper.newGuid(), aHelper.randomNumberAsText(), aHelper.randomText(20), aHelper.randomNumberAsText(2), '$');
    };

    /*Load products from local storage.
    */


    Products.prototype.loadProductFromLocalStorage = function() {
      var a;
      a = JSON.parse(localStorage.getItem(this.system_name));
      this.system_name = a.system_name;
      this.name = a.name;
      this.products_list = a.products_list;
      return true;
    };

    return Products;

  })();

  Page = {
    "Products": new Products().fillWithRandomProducts()
  };

  /*
  Generation and tests of instances.
  */


  product1 = new Product("1111111", "1111111A", "Produit1", "99", '$');

  product2 = new Product("2222222", "2222222B", "Produit2", "99", '$');

  product3 = new Product("3333333", "3333333C", "Produit3", "99", '$');

  product4 = new Product("4444444", "4444444D", "Produit4", "99", '$');

  product5 = new Product("5555555", "5555555E", "Produit5", "99", '$');

  product6 = new Product("6666666", "6666666F", "Produit6", "99", '$');

  product7 = new Product("7777777", "7777777G", "Produit7", "99", '$');

  p = new Products;

  p.products_list.push(product1);

  p.products_list.push(product2);

  p.products_list.push(product3);

  p.products_list.push(product4);

  p.products_list.push(product5);

  p.products_list.push(product6);

  p.products_list.push(product7);
